# -*- coding: utf-8 -*-
"""semaxspaul_fashion_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pl_0zOrQN4SajGjRXfatqSnXxb2NbVAf

## FASHION MNIST DATASET
In this notebook I aim to successfuly classify the famous fashion mnist dataset.

> Data Acquisition Credit:
Fashion-MNIST: a Novel Image Dataset for Benchmarking Machine Learning Algorithms. Han Xiao, Kashif Rasul, Roland Vollgraf. arXiv:1708.07747

>> Code by:
@semaxspaul
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras

# Loading fashion data using the 'keras' API by tensorflow
fashion_data = keras.datasets.fashion_mnist

"""> Pre-processing Data"""

# Splitting data into training and testing sets
(train_images, train_labels), (test_images, test_labels) = fashion_data.load_data()

# Label names
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

# Scaling the pixel values to a range between (0~1)
train_images = train_images/255.0
test_images = test_images/255.0

"""> Training a model"""

from keras.api._v2.keras import activations
# Defining the model architecture
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam', 
              loss='sparse_categorical_crossentropy', 
              metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=5)

test_loss, test_accuracy = model.evaluate(test_images, test_labels)

print(f"Model Test Accuracy is: {test_accuracy}")

# Editing the model hyperparameters to see if it gives better accuracy

# In this case I increased the num_epochs = 10
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28,28)),
    keras.layers.Dense(128, activation='relu'),
    keras.layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam', 
              loss='sparse_categorical_crossentropy', 
              metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=10)

test_loss, test_accuracy = model.evaluate(test_images, test_labels)

print(f"Model Test Accuracy is: {test_accuracy}")

"""> Making Predictions using the model"""

model_predictions = model.predict(test_images)

# for one image prediction
# model_prediction = model.predict([test_images[i]]) // output = [arrayOfValues]


# Below is a result for the first 5 images in the test set
for index in range(5):
  plt.grid(False)
  plt.imshow(test_images[index], cmap=plt.cm.binary)
  plt.xlabel(f"Actual: {class_names[test_labels[index]]}")
  plt.title(f"Actual: {class_names[np.argmax(model_predictions[index])]}")
  plt.show()

"""> This has been my first project of classifying using deep learning algorithms and employing the TensorFlow Framework

> Dataset License
>> MIT License | Copyright (c) 2017 Fran√ßois Chollet
"""

